{"version":3,"sources":["lib/adb-client.js","components/canvas/Canvas.js","components/app/App.js","serviceWorker.js","index.js"],"names":["db","Database","url","arangoVersion","useDatabase","useBearerAuth","evSvc","route","Cytoscape","use","Popper","Cxtmenu","Edgehandles","Canvas","props","window","datacy","headless","state","elements","cy","this","configurePlugins","path","timestamp","options","groupBy","post","Object","assign","accept","data","body","cg2cy","annotate","setData","setHandlers","sun","getSun","scratch","planets","setElements","$","eh","edgehandles","preview","hoverDelay","handleNodes","snap","snapThreshold","snapFrequency","noEdgeEventsInDraw","disableBrowserGestures","handlePosition","node","handleInDrawMode","edgeType","sourceNode","targetNode","loopAllowed","nodeLoopOffset","nodeParams","edgeParams","i","ghostEdgeParams","show","hide","start","complete","addedEles","stop","cancel","cancelledTargets","hoverover","hoverout","previewon","previewEles","previewoff","drawon","drawoff","menuRadius","selector","commands","buildMenu","bind","fillColor","activeFillColor","activePadding","indicatorSize","separatorWidth","spotlightPadding","minSpotlightRadius","maxSpotlightRadius","openMenuEvents","itemColor","itemTextShadowColor","zIndex","atMouse","content","select","console","log","forEach","cxt","cxtmenu","layout","name","fit","directed","padding","circle","grid","spacingFactor","avoidOverlap","nodeDimensionsIncludeLabels","maximal","transform","position","run","objClass","outgoers","$id","id","filter","el","isNode","target","getDataNode","dataNode","menu","print","document","createElement","ReactDOM","render","push","outerHTML","contentStyle","enabled","switchboard","key","K","charAt","toUpperCase","menuItemMinimize","hideChildren","menuItemMaximize","revealChildren","childClasses","reduce","acc","add","Set","startingNode","children","getChildren","arguments","length","setState","map","json","remove","addClass","buildSwitchBoard","on","e","style","width","edge","selected","Row","className","Col","Button","color","size","height","stylesheet","typeMap","vertex","fieldMap","_id","_from","_to","result","type","nodes","item","k","match","React","Component","App","toggle","isOpen","Container","fluid","Navbar","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","Boolean","location","hostname","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1051a9b9.chunk.js","sourcesContent":["import { Database } from \"arangojs\";\n\nconst db = new Database({\n  url: \"http://localhost:3000\",\n  arangoVersion: 30407\n});\ndb.useDatabase(\"evstore\");\ndb.useBearerAuth(\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjEuNTY5Mzk5Mzk4MTM5NzQ1ZSs2LCJleHAiOjE1NzE5OTEzOTgsImlzcyI6ImFyYW5nb2RiIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZXZzdG9yZSJ9.XlPGNQ8Zpn8LP8vI1tNL_KiOVNq5TV6WpuRv6lP3_QY=\"\n);\n\nconst evSvc = db.route(\"evstore\");\n\nexport const show = (path, timestamp, options) =>\n  evSvc.post(\n    \"event/show\",\n    { path },\n    Object.assign(timestamp ? { timestamp } : {}, options),\n    {\n      accept: \"application/json\"\n    }\n  );\n","import Cytoscape from \"cytoscape\";\nimport Cxtmenu from \"cytoscape-cxtmenu\";\nimport Edgehandles from \"cytoscape-edgehandles\";\nimport Popper from \"cytoscape-popper\";\nimport React from \"react\";\nimport CytoscapeComponent from \"react-cytoscapejs\";\nimport ReactDOM from \"react-dom\";\nimport {\n  Maximize2,\n  Minimize2,\n  Printer,\n  Repeat,\n  RotateCcw\n} from \"react-feather\";\nimport { Button, Col, Row } from \"reactstrap\";\nimport { show } from \"../../lib/adb-client\";\nimport \"./Canvas.css\";\nimport style from \"./style\";\n\nCytoscape.use(Popper);\nCytoscape.use(Cxtmenu);\nCytoscape.use(Edgehandles);\n\nclass Canvas extends React.Component {\n  constructor(props = {}) {\n    super(props);\n\n    window.datacy = this.datacy = Cytoscape({\n      headless: true\n    });\n\n    this.state = {\n      elements: []\n    };\n  }\n\n  async componentDidMount() {\n    window.cy = this.cy;\n\n    this.configurePlugins();\n\n    let data = (await show(\n      this.props.path || \"/g/evstore_test_ss_lineage\",\n      null,\n      { groupBy: \"type\" }\n    )).body;\n    data = this.cg2cy(data);\n    data = this.annotate(data);\n\n    this.setData(data);\n    this.setHandlers();\n\n    const sun = this.getSun();\n    const switchboard = sun.scratch(\"switchboard\");\n    switchboard.planets = true;\n\n    this.setElements();\n  }\n\n  getSun() {\n    return this.datacy.$('node[obj-class = \"stars\"]')[0];\n  }\n\n  configurePlugins() {\n    // the default values of each option are outlined below:\n    const ehDefaults = {\n      preview: true, // whether to show added edges preview before releasing selection\n      hoverDelay: 150, // time spent hovering over a target node before it is considered selected\n      handleNodes: \"node\", // selector/filter function for whether edges can be made from a given node\n      snap: true, // when enabled, the edge can be drawn by just moving close to a target node\n      snapThreshold: 50, // the target node must be less than or equal to this many pixels away from the cursor/finger\n      snapFrequency: 15, // the number of times per second (Hz) that snap checks done (lower is less expensive)\n      noEdgeEventsInDraw: false, // set events:no to edges during draws, prevents mouseouts on compounds\n      disableBrowserGestures: true, // during an edge drawing gesture, disable browser gestures such as two-finger\n      // trackpad swipe and pinch-to-zoom\n      handlePosition: function(node) {\n        return \"middle top\"; // sets the position of the handle in the format of \"X-AXIS Y-AXIS\" such as \"left top\",\n        // \"middle top\"\n      },\n      handleInDrawMode: false, // whether to show the handle in draw mode\n      edgeType: function(sourceNode, targetNode) {\n        // can return 'flat' for flat edges between nodes or 'node' for intermediate node between them\n        // returning null/undefined means an edge can't be added between the two nodes\n        return \"flat\";\n      },\n      loopAllowed: function(node) {\n        // for the specified node, return whether edges from itself to itself are allowed\n        return true;\n      },\n      nodeLoopOffset: -50, // offset for edgeType: 'node' loops\n      nodeParams: function(sourceNode, targetNode) {\n        // for edges between the specified source and target\n        // return element object to be passed to cy.add() for intermediary node\n        return {};\n      },\n      edgeParams: function(sourceNode, targetNode, i) {\n        // for edges between the specified source and target\n        // return element object to be passed to cy.add() for edge\n        // NB: i indicates edge index in case of edgeType: 'node'\n        return {};\n      },\n      ghostEdgeParams: function() {\n        // return element object to be passed to cy.add() for the ghost edge\n        // (default classes are always added for you)\n        return {};\n      },\n      show: function(sourceNode) {\n        // fired when handle is shown\n      },\n      hide: function(sourceNode) {\n        // fired when the handle is hidden\n      },\n      start: function(sourceNode) {\n        // fired when edgehandles interaction starts (drag on handle)\n      },\n      complete: function(sourceNode, targetNode, addedEles) {\n        // fired when edgehandles is done and elements are added\n      },\n      stop: function(sourceNode) {\n        // fired when edgehandles interaction is stopped (either complete with added edges or incomplete)\n      },\n      cancel: function(sourceNode, cancelledTargets) {\n        // fired when edgehandles are cancelled (incomplete gesture)\n      },\n      hoverover: function(sourceNode, targetNode) {\n        // fired when a target is hovered\n      },\n      hoverout: function(sourceNode, targetNode) {\n        // fired when a target isn't hovered anymore\n      },\n      previewon: function(sourceNode, targetNode, previewEles) {\n        // fired when preview is shown\n      },\n      previewoff: function(sourceNode, targetNode, previewEles) {\n        // fired when preview is hidden\n      },\n      drawon: function() {\n        // fired when draw mode enabled\n      },\n      drawoff: function() {\n        // fired when draw mode disabled\n      }\n    };\n    this.eh = this.cy.edgehandles(ehDefaults);\n\n    const cxtDefaults = [\n      {\n        menuRadius: 80, // the radius of the circular menu in pixels\n        selector: \"*\", // elements matching this Cytoscape.js selector will trigger cxtmenus\n        commands: this.buildMenu.bind(this), // function( ele ){ return [ /*...*/ ] }, // a function that returns\n        // commands\n        // or a\n        // promise of\n        // commands\n        fillColor: \"rgba(0, 0, 0, 0.75)\", // the background colour of the menu\n        activeFillColor: \"rgba(1, 105, 217, 0.75)\", // the colour used to indicate the selected command\n        activePadding: 10, // additional size in pixels for the active command\n        indicatorSize: 24, // the size in pixels of the pointer to the active command\n        separatorWidth: 3, // the empty spacing in pixels between successive commands\n        spotlightPadding: 4, // extra spacing in pixels between the element and the spotlight\n        minSpotlightRadius: 24, // the minimum radius in pixels of the spotlight\n        maxSpotlightRadius: 38, // the maximum radius in pixels of the spotlight\n        openMenuEvents: \"cxttapstart taphold\", // space-separated cytoscape events that will open the menu; only\n        // `cxttapstart` and/or `taphold` work here\n        itemColor: \"white\", // the colour of text in the command's content\n        itemTextShadowColor: \"transparent\", // the text shadow colour of the command's content\n        zIndex: 9999, // the z-index of the ui div\n        atMouse: false // draw menu at mouse position\n      },\n      {\n        selector: \"core\",\n\n        commands: [\n          {\n            content: \"bg1\",\n            select: function() {\n              console.log(\"bg1\");\n            }\n          },\n\n          {\n            content: \"bg2\",\n            select: function() {\n              console.log(\"bg2\");\n            }\n          }\n        ],\n        openMenuEvents: \"cxttapstart taphold\"\n      }\n    ];\n\n    cxtDefaults.forEach(cxt => this.cy.cxtmenu(cxt));\n  }\n\n  draw() {\n    const options = {\n      name: \"breadthfirst\",\n\n      fit: true, // whether to fit the viewport to the graph\n      directed: true, // whether the tree is directed downwards (or edges can point in any direction if false)\n      padding: 30, // padding on fit\n      circle: true, // put depths in concentric circles if true, put depths top down if false\n      grid: false, // whether to create an even grid into which the DAG is placed (circle:false only)\n      spacingFactor: 1.75, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)\n      avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space\n      nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout\n      // algorithm\n      maximal: true, // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS\n      // only)\n      transform: function(node, position) {\n        return position;\n      } // transform a given node position. Useful for changing flow direction in discrete layouts\n    };\n    this.cy.layout(options).run();\n  }\n\n  getChildren(node, objClass) {\n    console.log({ node, objClass });\n    const outgoers = this.datacy.$id(node.id()).outgoers();\n\n    if (objClass) {\n      return outgoers.filter(el => {\n        if (el.isNode()) {\n          return el.data()[\"obj-class\"] === objClass;\n        } else {\n          return el.target().data()[\"obj-class\"] === objClass;\n        }\n      });\n    }\n\n    return outgoers;\n  }\n\n  getDataNode(node) {\n    return this.datacy.$id(node.id());\n  }\n\n  revealChildren(node, objClass) {\n    const dataNode = this.getDataNode(node);\n    const switchboard = dataNode.scratch(\"switchboard\");\n    switchboard[objClass] = true;\n\n    this.setElements();\n  }\n\n  hideChildren(node, objClass) {\n    const dataNode = this.getDataNode(node);\n    const switchboard = dataNode.scratch(\"switchboard\");\n    switchboard[objClass] = false;\n\n    this.setElements();\n  }\n\n  buildMenu(node) {\n    const dataNode = this.getDataNode(node);\n    const menu = [];\n\n    const print = document.createElement(\"span\");\n    ReactDOM.render(<Printer />, print);\n    menu.push({\n      fillColor: \"rgba(200, 200, 200, 0.75)\",\n      content: print.outerHTML,\n      contentStyle: {},\n      select: function(el) {\n        console.log(el.data());\n      },\n      enabled: true\n    });\n\n    const switchboard = dataNode.scratch(\"switchboard\");\n    for (const key in switchboard) {\n      const K = key.charAt(0).toUpperCase();\n      if (switchboard[key]) {\n        const menuItemMinimize = document.createElement(\"span\");\n        ReactDOM.render(\n          <span>\n            <Minimize2 /> {K}\n          </span>,\n          menuItemMinimize\n        );\n\n        menu.push({\n          fillColor: \"rgba(0, 200, 200, 0.75)\",\n          content: menuItemMinimize.outerHTML,\n          select: node => this.hideChildren(node, key)\n        });\n      } else {\n        const menuItemMaximize = document.createElement(\"span\");\n        ReactDOM.render(\n          <span>\n            <Maximize2 /> {K}\n          </span>,\n          menuItemMaximize\n        );\n\n        menu.push({\n          fillColor: \"rgba(200, 200, 0, 0.75)\",\n          content: menuItemMaximize.outerHTML,\n          select: node => this.revealChildren(node, key)\n        });\n      }\n    }\n\n    return menu;\n  }\n\n  buildSwitchBoard(dataNode) {\n    const childClasses = dataNode\n      .outgoers()\n      .filter(el => el.isNode())\n      .reduce((acc, node) => {\n        acc.add(node.data()[\"obj-class\"]);\n\n        return acc;\n      }, new Set());\n\n    const switchboard = {};\n    for (const objClass of childClasses) {\n      switchboard[objClass] = false;\n    }\n    dataNode.scratch(\"switchboard\", switchboard);\n  }\n\n  setElements(startingNode, elements = []) {\n    startingNode = startingNode || this.getSun();\n    elements.push(startingNode);\n\n    const switchboard = startingNode.scratch(\"switchboard\");\n    for (const key in switchboard) {\n      if (switchboard[key]) {\n        const children = this.getChildren(startingNode, key);\n        children.forEach(el => {\n          elements.push(el);\n\n          if (el.isNode()) {\n            this.setElements(el, elements);\n          }\n        });\n      }\n    }\n\n    if (!arguments.length) {\n      this.setState({\n        elements: elements.map(el => el.json())\n      });\n    }\n  }\n\n  setData(data) {\n    const cy = this.datacy;\n\n    cy.elements().remove();\n    cy.add(data);\n    // cy.$('node [[degree = 0]]').remove();\n    cy.$(\"*\").addClass(\"data\");\n    cy.$(\"node\").forEach(node => this.buildSwitchBoard(node));\n  }\n\n  setHandlers() {\n    const cy = this.cy;\n\n    cy.on(\"tapdragover select\", \"edge\", e => {\n      e.target.style({\n        width: 4,\n        \"line-color\": \"#007bff\",\n        \"target-arrow-color\": \"#007bff\"\n      });\n    });\n\n    cy.on(\"tapdragout unselect\", \"edge\", e => {\n      const edge = e.target;\n\n      if (!edge.selected()) {\n        edge.style({\n          width: 2,\n          \"line-color\": \"#ccc\",\n          \"target-arrow-color\": \"#ccc\"\n        });\n      }\n    });\n\n    cy.on(\"tapdragover select\", \"node.data\", e => {\n      const node = e.target;\n      const style = node.scratch(\"style\") || {};\n\n      if (!style[\"background-color\"]) {\n        style[\"background-color\"] = node.style(\"background-color\");\n        node.scratch(\"style\", style);\n      }\n\n      node.style({\n        \"background-color\": \"#007bff\"\n      });\n    });\n\n    cy.on(\"tapdragout unselect\", \"node.data\", e => {\n      const node = e.target;\n\n      if (!node.selected()) {\n        node.style({\n          \"background-color\": node.scratch(\"style\")[\"background-color\"]\n        });\n\n        const style = node.scratch(\"style\") || {};\n        style[\"background-color\"] = false;\n\n        node.scratch(\"style\", style);\n      }\n    });\n  }\n\n  render() {\n    const options = {\n      name: \"breadthfirst\",\n\n      fit: false, // whether to fit the viewport to the graph\n      directed: true, // whether the tree is directed downwards (or edges can point in any direction if false)\n      padding: 30, // padding on fit\n      circle: false, // put depths in concentric circles if true, put depths top down if false\n      grid: false, // whether to create an even grid into which the DAG is placed (circle:false only)\n      spacingFactor: 1.75, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)\n      avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space\n      nodeDimensionsIncludeLabels: true, // Excludes the label when calculating node bounding boxes for the layout\n      // algorithm\n      maximal: true, // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS\n      // only)\n      transform: function(node, position) {\n        return position;\n      } // transform a given node position. Useful for changing flow direction in discrete layouts\n    };\n\n    return (\n      <div>\n        <Row className=\"my-1\">\n          <Col>\n            <Button color=\"danger\">\n              <RotateCcw size={16} /> Reset\n            </Button>\n            &nbsp;\n            <Button color=\"primary\">\n              <Repeat size={16} /> Redraw\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <div\n              className=\"border border-secondary rounded w-100\"\n              id=\"cy-container\"\n            >\n              <div className=\"m-1\" id=\"cy\">\n                <CytoscapeComponent\n                  cy={cy => {\n                    this.cy = cy;\n                  }}\n                  style={{ width: \"100%\", height: \"100%\" }}\n                  stylesheet={style}\n                  layout={options}\n                  elements={this.state.elements}\n                />\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n\n  cg2cy(data) {\n    const typeMap = {\n      vertex: \"nodes\",\n      edge: \"edges\"\n    };\n    const fieldMap = {\n      _id: \"id\",\n      _from: \"source\",\n      _to: \"target\"\n    };\n\n    const result = {};\n\n    for (let el of data) {\n      const key = typeMap[el.type];\n      result[key] = [];\n      for (let node of el.nodes) {\n        const item = {};\n        for (let k in node) {\n          // noinspection JSUnfilteredForInLoop\n          item[fieldMap[k] || k] = node[k];\n        }\n        result[key].push({ data: item });\n      }\n    }\n\n    return result;\n  }\n\n  annotate(data) {\n    data.nodes.forEach(\n      node =>\n        (node.data[\"obj-class\"] = node.data.id.match(\n          /evstore_test_(.*)\\/.*/\n        )[1])\n    );\n\n    return data;\n  }\n}\n\nexport default Canvas;\n","import React, { Component } from \"react\";\nimport {\n  Col,\n  Collapse,\n  Container,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  NavItem,\n  NavLink,\n  Row\n} from \"reactstrap\";\nimport Canvas from \"../canvas/Canvas\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Navbar\n          color=\"inverse\"\n          light\n          expand=\"md\"\n          className=\"border-bottom mb-2\"\n        >\n          <NavbarBrand href=\"/\">\n            CivicGraph Demo - A DIY Solar System\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"/components/\">Components</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"https://github.com/reactstrap/reactstrap\">\n                  Github\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n        <Container>\n          <Row>\n            <Col>\n              <Canvas />\n            </Col>\n          </Row>\n        </Container>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}